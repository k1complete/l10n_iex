#. TRANSLATORS: Elixir.IEx.Helpers Summary
#: lib/iex/helpers.ex:2 
msgid ""
"Welcome to Interactive Elixir. You are currently\n"
"seeing the documentation for the module `IEx.Helpers`\n"
"which provides many helpers to make Elixir's shell\n"
"more joyful to work with.\n"
"\n"
"This message was triggered by invoking the helper\n"
"`h()`, usually referred to as `h/0` (since it expects 0\n"
"arguments).\n"
"\n"
"There are many other helpers available:\n"
"\n"
"  * `b/1`           - prints callbacks info and docs for a given module\n"
"  * `c/2`           - compiles a file at the given path\n"
"  * `cd/1`          - changes the current directory\n"
"  * `clear/0`       - clears the screen\n"
"  * `flush/0`       - flushes all messages sent to the shell\n"
"  * `h/0`           - prints this help message\n"
"  * `h/1`           - prints help for the given module, function or macro\n"
"  * `import_file/1` - evaluates the given file in the shell's context\n"
"  * `l/1`           - loads the given module's beam code\n"
"  * `ls/0`          - lists the contents of the current directory\n"
"  * `ls/1`          - lists the contents of the specified directory\n"
"  * `pid/3`         - creates a PID with the 3 integer arguments passed\n"
"  * `pwd/0`         - prints the current working directory\n"
"  * `r/1`           - recompiles and reloads the given module\n"
"  * `recompile/0`   - recompiles the current Mix project (requires iex -S mix)\n"
"  * `respawn/0`     - respawns a new IEx shell\n"
"  * `s/1`           - prints spec information\n"
"  * `t/1`           - prints type information\n"
"  * `v/0`           - retrieves the last value from the history\n"
"  * `v/1`           - retrieves the nth value from the history\n"
"\n"
"Help for functions in this module can be consulted\n"
"directly from the command line, as an example, try:\n"
"\n"
"    h(c/2)\n"
"\n"
"You can also retrieve the documentation for any module\n"
"or function. Try these:\n"
"\n"
"    h(Enum)\n"
"    h(Enum.reverse/1)\n"
"\n"
"To discover all available functions for a module, type the module name\n"
"followed by a dot, then press tab to trigger autocomplete. For example:\n"
"\n"
"    Enum.\n"
"\n"
"To learn more about IEx as a whole, just type `h(IEx)`.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.recompile()
#: lib/iex/helpers.ex:56 
msgid ""
"Recompiles the current Mix application.\n"
"\n"
"This helper only works when IEx is started with a Mix\n"
"project, for example, `iex -S mix`. Before compiling\n"
"the code, it will stop the current application, and\n"
"start it again afterwards. Stopping applications are\n"
"required so processes in the supervision tree won't\n"
"crash when code is upgraded multiple times without\n"
"going through the proper hot-code swapping mechanism.\n"
"\n"
"Changes to `mix.exs` or configuration files won't be\n"
"picked up by this helper, only changes to sources.\n"
"Restarting the shell and Mix is required in such cases.\n"
"\n"
"If you want to reload a single module, consider using\n"
"`r ModuleName` instead.\n"
"\n"
"NOTE: This feature is experimental and may be removed\n"
"in upcoming releases.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.r(module)
#: lib/iex/helpers.ex:352 
msgid ""
"Recompiles and reloads the given `module`.\n"
"\n"
"Please note that all the modules defined in the same\n"
"file as `module` are recompiled and reloaded.\n"
"\n"
"## In-memory reloading\n"
"\n"
"When we reload the module in IEx, we recompile the module source code,\n"
"updating its contents in memory. The original `.beam` file in disk,\n"
"probably the one where the first definition of the module came from,\n"
"does not change at all.\n"
"\n"
"Since typespecs and docs are loaded from the .beam file (they are not\n"
"loaded in memory with the module because there is no need for them to\n"
"be in memory), they are not reloaded when you reload the module.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.ls(path \\ ".")
#: lib/iex/helpers.ex:451 
msgid ""
"Produces a simple list of a directory's contents.\n"
"\n"
"If `path` points to a file, prints its full path.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.v(n \\ -1)
#: lib/iex/helpers.ex:342 
msgid ""
"Retrieves the nth expression's value from the history.\n"
"\n"
"Use negative values to lookup expression values relative to the current one.\n"
"For instance, v(-1) returns the result of the last evaluated expression.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.respawn()
#: lib/iex/helpers.ex:516 
msgid ""
"Respawns the current shell by starting a new shell process.\n"
"\n"
"Returns `true` if it worked.\n"
msgstr ""
#. TRANSLATORS: defmacro IEx.Helpers.t(term)
#: lib/iex/helpers.ex:275 
msgid ""
"Prints the types for the given module or for the given function/arity pair.\n"
"\n"
"## Examples\n"
"\n"
"    t(Enum)\n"
"    t(Enum.t/0)\n"
"    t(Enum.t)\n"
msgstr ""
#. TRANSLATORS: defmacro IEx.Helpers.s(term)
#: lib/iex/helpers.ex:303 
msgid ""
"Prints the specs for the given module or for the given function/arity pair.\n"
"\n"
"## Examples\n"
"\n"
"    s(Enum)\n"
"    s(Enum.all?)\n"
"    s(Enum.all?/2)\n"
"    s(is_atom)\n"
"    s(is_atom/1)\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro IEx.Helpers.h(term)
#: lib/iex/helpers.ex:187 
msgid ""
"Prints the documentation for the given module\n"
"or for the given function/arity pair.\n"
"\n"
"## Examples\n"
"\n"
"    h(Enum)\n"
"    #=> Prints documentation for Enum\n"
"\n"
"It also accepts functions in the format `fun/arity`\n"
"and `module.fun/arity`, for example:\n"
"\n"
"    h receive/1\n"
"    h Enum.all?/2\n"
"    h Enum.all?\n"
"\n"
msgstr ""
#. TRANSLATORS: defmacro IEx.Helpers.b(term)
#: lib/iex/helpers.ex:243 
msgid ""
"Prints the documentation for the given callback function.\n"
"\n"
"It also accepts single module argument to list\n"
"all available behaviour callbacks.\n"
"\n"
"## Examples\n"
"\n"
"    b(Mix.Task.run/1)\n"
"    b(Mix.Task.run)\n"
"    b(Dict)\n"
"\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.h()
#: lib/iex/helpers.ex:179 
msgid ""
"Prints the documentation for `IEx.Helpers`.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.pwd()
#: lib/iex/helpers.ex:433 
msgid ""
"Prints the current working directory.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.l(module)
#: lib/iex/helpers.ex:394 
msgid ""
"Loads the given module's beam code (and ensures any previous\n"
"old version was properly purged before).\n"
"\n"
"This function is useful when you know the bytecode for module\n"
"has been updated in the filesystem and you want to tell the VM\n"
"to load it.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.flush()
#: lib/iex/helpers.ex:407 
msgid ""
"Flushes all messages sent to the shell and prints them out.\n"
msgstr ""
#. TRANSLATORS: defmacro IEx.Helpers.import_file(path, opts \\ [])
#: lib/iex/helpers.ex:528 
msgid ""
"Evaluates the contents of the file at `path` as if it were directly typed into\n"
"the shell.\n"
"\n"
"`path` has to be a literal string. `path` is automatically expanded via\n"
"`Path.expand/1`.\n"
"\n"
"## Non-existent files\n"
"\n"
"By default, `import_file/1` fails when the given file does not exist. However,\n"
"since this macro is expanded at compile-time, it's not possible to\n"
"conditionally import a file since the macro is always expanded:\n"
"\n"
"    # This raises a File.Error if ~/.iex.exs doesn't exist.\n"
"    if (\"~/.iex.exs\" |> Path.expand |> File.exists?) do\n"
"      import_file \"~/.iex.exs\"\n"
"    end\n"
"\n"
"This is why an `:optional` option can be passed to `import_file/1`. The\n"
"default value of this option is `false`, meaning that an exception will be\n"
"raised if the given file is missing. If `:optional` is set to `true`, missing\n"
"files will be ignored and `import_file/1` will just compile to `nil`.\n"
"\n"
"## Examples\n"
"\n"
"    # ~/file.exs\n"
"    value = 13\n"
"\n"
"    # in the shell\n"
"    iex(1)> import_file \"~/file.exs\"\n"
"    13\n"
"    iex(2)> value\n"
"    13\n"
"    iex(3)> import_file \"nonexisting.file.ex\", optional: true\n"
"    nil\n"
"\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.pid(x, y, z)
#: lib/iex/helpers.ex:595 
msgid ""
"Creates a PID with 3 non negative integers passed as arguments\n"
"to the function.\n"
"\n"
"## Examples\n"
"    iex> pid(0, 21, 32)\n"
"    #PID<0.21.32>\n"
"    iex> pid(0, 64, 2048)\n"
"    #PID<0.64.2048>\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.c(files, path \\ ".")
#: lib/iex/helpers.ex:116 
msgid ""
"Compiles the given files.\n"
"\n"
"It expects a list of files to compile and an optional path to write\n"
"the compiled code to (defaults to the current directory). When compiling\n"
"one file, there is no need to wrap it in a list.\n"
"\n"
"It returns the name of the compiled modules.\n"
"\n"
"If you want to recompile an existing module, check `r/1` instead.\n"
"\n"
"## Examples\n"
"\n"
"    c [\"foo.ex\", \"bar.ex\"], \"ebin\"\n"
"    #=> [Foo, Bar]\n"
"\n"
"    c \"baz.ex\"\n"
"    #=> [Baz]\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.clear()
#: lib/iex/helpers.ex:163 
msgid ""
"Clears the console screen.\n"
"\n"
"This function only works if ANSI escape codes are enabled\n"
"on the shell, which means this function is by default\n"
"unavailable on Windows machines.\n"
msgstr ""
#. TRANSLATORS: def IEx.Helpers.cd(directory)
#: lib/iex/helpers.ex:440 
msgid ""
"Changes the current working directory to the given path.\n"
msgstr ""
