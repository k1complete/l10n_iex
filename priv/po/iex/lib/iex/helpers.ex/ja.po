msgid ""
msgstr ""
"Project-Id-Version: l 10n_iex\n"
"PO-Revision-Date: 2015-05-19 21:48+0900\n"
"Last-Translator: 小田 照敬 <EMAIL@ADDRESS>\n"
"Language-Team: Japanese\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#. TRANSLATORS: def IEx.Helpers.r(module)
#: lib/iex/helpers.ex:277
msgid ""
"Recompiles and reloads the specified module's source file.\n"
"\n"
"Please note that all the modules defined in the same file as `module`\n"
"are recompiled and reloaded.\n"
msgstr ""
"指定されたモジュールのソースコードを再コンパイルして再ロードします。\n"
"\n"
"`module`と同じファイルで定義された全てのモジュールが再コンパイル、リロード\n"
"されることに注意してください。\n"

#. TRANSLATORS: def IEx.Helpers.ls(path \\ ".")
#: lib/iex/helpers.ex:359
msgid ""
"Produces a simple list of a directory's contents.\n"
"If `path` points to a file, prints its full path.\n"
msgstr ""
"シンプルなディレクトリの内容のリストを提供します。\n"
"もし`path`がファイルを指していたら、そのフルパスを表示します。\n"

#. TRANSLATORS: defmacro IEx.Helpers.t(module)
#: lib/iex/helpers.ex:187
msgid ""
"When given a module, prints specifications (or simply specs) for all the\n"
"types defined in it.\n"
"\n"
"When given a particular type name, prints its spec.\n"
"\n"
"## Examples\n"
"\n"
"    t(Enum)\n"
"    t(Enum.t/0)\n"
"    t(Enum.t)\n"
msgstr ""
"モジュールが与えらえると、そこで定義された全ての型の仕様(または\n"
"spec)を表示します。\n"
"\n"
"明示的に型の名前が与えられると、そのspecが表示されます。\n"
"\n"
"## 例\n"
"\n"
"    t(Enum)\n"
"    t(Enum.t/0)\n"
"    t(Enum.t)\n"

#. TRANSLATORS: Elixir.IEx.Helpers Summary
#: lib/iex/helpers.ex:1
#, fuzzy
msgid ""
"Welcome to Interactive Elixir. You are currently\n"
"seeing the documentation for the module `IEx.Helpers`\n"
"which provides many helpers to make Elixir's shell\n"
"more joyful to work with.\n"
"\n"
"This message was triggered by invoking the helper\n"
"`h()`, usually referred to as `h/0` (since it expects 0\n"
"arguments).\n"
"\n"
"There are many other helpers available:\n"
"\n"
"  * `c/2`           — compiles a file at the given path\n"
"  * `cd/1`          — changes the current directory\n"
"  * `clear/0`       — clears the screen\n"
"  * `flush/0`       — flushes all messages sent to the shell\n"
"  * `h/0`           — prints this help message\n"
"  * `h/1`           — prints help for the given module, function or macro\n"
"  * `l/1`           — loads the given module's beam code\n"
"  * `ls/0`          — lists the contents of the current directory\n"
"  * `ls/1`          — lists the contents of the specified directory\n"
"  * `pwd/0`         — prints the current working directory\n"
"  * `r/1`           — recompiles and reloads the given module's source file\n"
"  * `respawn/0`     — respawns the current shell\n"
"  * `s/1`           — prints spec information\n"
"  * `t/1`           — prints type information\n"
"  * `v/0`           — prints the history of commands evaluated in the "
"session\n"
"  * `v/1`           — retrieves the nth value from the history\n"
"  * `import_file/1` — evaluates the given file in the shell's context\n"
"\n"
"Help for functions in this module can be consulted\n"
"directly from the command line, as an example, try:\n"
"\n"
"    h(c/2)\n"
"\n"
"You can also retrieve the documentation for any module\n"
"or function. Try these:\n"
"\n"
"    h(Enum)\n"
"    h(Enum.reverse/1)\n"
"\n"
"To discover all available functions for a module, type the module name\n"
"followed by a dot, then press tab to trigger autocomplete. For example:\n"
"\n"
"    Enum.\n"
"\n"
"To learn more about IEx as a whole, just type `h(IEx)`.\n"
msgstr ""
"インタラクティブElixirへようこそ。あなたは現在Elixirシェルをもっと楽し\n"
"くするために提供された沢山のヘルパーモジュールである`IEx.Helpers`モジュー\n"
"ルのドキュメントを参照しています。\n"
"\n"
"このメッセージは通常`h/0`(これは引数の数が0個ということを示しています)\n"
"として参照されるヘルパー`h()`により起動され、表示されています。\n"
"\n"
"他に沢山のヘルパーが有効です:\n"
"\n"
"  * `c/2`       — 与えられたパスのファイルをコンパイルします\n"
"  * `cd/1`      — カレントディレクトリを変更します\n"
"  * `clear/0`   — スクリーンをクリアします\n"
"  * `flush/0`   — シェルへ送信した全メッセージを破棄します\n"
"  * `h/0`       — このヘルプメッセージを表示します\n"
"  * `h/1`       — 与えられたモジュール、関数、マクロのヘルプを表示します\n"
"  * `l/1`       — beamコードをロードして現在のバージョンをパージします\n"
"  * `ls/0`      — カレントディレクトリの内容をリストします\n"
"  * `ls/1`      — 指定されたディレクトリの内容をリストします\n"
"  * `pwd/0`     — カレントワーキングディレクトリを表示します\n"
"  * `r/1`       — 与えられたモジュールのソースコードを再コンパイルし\n"
"                  てリロードします\n"
"  * `respawn/0` — 現在のシェルを再生成します\n"
"  * `s/1`       — Spec情報を表示します\n"
"  * `t/1`       — 型情報を表示します\n"
"  * `v/0`       — セッションのコマンド評価の履歴を表示します\n"
"  * `v/1`       — 履歴のn番目を取り出します\n"
"  * `import_file/1`\n"
"                — シェルのコンテキストで与えられたファイルを評価します\n"
"\n"
"このモジュールの関数のヘルプはコマンドラインから\n"
"このようにして、直接調べることができる。やってみよう:\n"
"\n"
"    h(c/2)\n"
"\n"
"任意のモジュールあるいは関数のドキュメントも取り出すことがきる。このよ\n"
"うにしてみよう:\n"
"\n"
"    h(Enum)\n"
"    h(Enum.reverse/1)\n"
"\n"
"モジュールで全ての有効な関数を見付けるためには、モジュール名の後ろで\n"
"ドットをタイプして、それからタブを押すことで、オートコンプリートが\n"
"起動されます。例えば:\n"
"\n"
"    Enum.\n"
"\n"
"IEx全体についてもっと学ぶためには、`h(IEx)`とタイプしよう。\n"

#. TRANSLATORS: defmacro IEx.Helpers.s(other)
#: lib/iex/helpers.ex:221
msgid ""
"Similar to `t/1`, only for specs.\n"
"\n"
"When given a module, prints the list of all specs defined in the module.\n"
"\n"
"When given a particular spec name (with optional arity), prints its spec.\n"
"\n"
"## Examples\n"
"\n"
"    s(Enum)\n"
"    s(Enum.all?)\n"
"    s(Enum.all?/2)\n"
"    s(is_atom)\n"
"    s(is_atom/1)\n"
"\n"
msgstr ""
"`t/1`と似ていますが、spec用です。\n"
"\n"
"モジュールを与えるとモジュールで定義された全てのspecのリストを表示します。\n"
"\n"
"明示的にspec名を指定すると(アリティはオプションです)、そのspecを表示しま"
"す。\n"
"\n"
"## 例\n"
"\n"
"    s(Enum)\n"
"    s(Enum.all?)\n"
"    s(Enum.all?/2)\n"
"    s(is_atom)\n"
"    s(is_atom/1)\n"
"\n"

#. TRANSLATORS: def IEx.Helpers.v(n)
#: lib/iex/helpers.ex:267
msgid ""
"Retrieves the nth expression's value from the history.\n"
"\n"
"Use negative values to lookup expression values relative to the current "
"one.\n"
"For instance, v(-1) returns the result of the last evaluated expression.\n"
msgstr ""
"ヒストリからn番目の式を取り出します。\n"
"\n"
"現在の地点からの相対的に指定するためには負の値を使ってください。\n"
"例えば、v(-1)は最後に評価された式を返します。\n"

#. TRANSLATORS: def IEx.Helpers.respawn()
#: lib/iex/helpers.ex:423
msgid ""
"Respawns the current shell by starting a new\n"
"process and a new scope. Returns true if it worked.\n"
msgstr ""
"新しいスコープとプロセスを開始することで現在のシェルを再生成します。\n"
"成功するとtrueを返します。\n"

#. TRANSLATORS: def IEx.Helpers.v()
#: lib/iex/helpers.ex:251
msgid ""
"Prints the history of expressions evaluated during the session along with\n"
"their results.\n"
msgstr "セッションの間に評価された式の履歴をその結果とともに表示します。\n"

#. TRANSLATORS: defmacro IEx.Helpers.h(other)
#: lib/iex/helpers.ex:139
msgid ""
"Prints the documentation for the given module\n"
"or for the given function/arity pair.\n"
"\n"
"## Examples\n"
"\n"
"    h(Enum)\n"
"    #=> Prints documentation for Enum\n"
"\n"
"It also accepts functions in the format `fun/arity`\n"
"and `module.fun/arity`, for example:\n"
"\n"
"    h receive/1\n"
"    h Enum.all?/2\n"
"    h Enum.all?\n"
"\n"
msgstr ""
"与えられたモジュールまたは関数/アリティペアのドキュメントを\n"
"表示します。\n"
"\n"
"## 例\n"
"\n"
"    h(Enum)\n"
"    #=> Prints documentation for Enum\n"
"\n"
"関数の書式としては、`fun/arity`または`module.fun/arity`の何れのフォーマッ\n"
"トも受け入れます。\n"
"例えば: \n"
"\n"
"    h receive/1\n"
"    h Enum.all?/2\n"
"    h Enum.all?\n"
"\n"

#. TRANSLATORS: def IEx.Helpers.h()
#: lib/iex/helpers.ex:115
msgid "Prints the documentation for `IEx.Helpers`.\n"
msgstr "`IEx.Helpers`のドキュメントを表示します。\n"

#. TRANSLATORS: def IEx.Helpers.pwd()
#: lib/iex/helpers.ex:340
msgid "Prints the current working directory.\n"
msgstr "現在の作業ディレクトリを表示します。\n"

#. TRANSLATORS: def IEx.Helpers.l(module)
#: lib/iex/helpers.ex:306
msgid ""
"Load the given module's beam code (and ensures any previous\n"
"old version was properly purged before).\n"
msgstr ""
"与えられたモジュールのbeamコードをロードします(そしてその前に\n"
"以前の古いバージョンはパージされます)。\n"

#. TRANSLATORS: def IEx.Helpers.flush()
#: lib/iex/helpers.ex:314
msgid "Flushes all messages sent to the shell and prints them out.\n"
msgstr "シェルへ送られた全てのメッセージを破棄し、それらを表示します。\n"

#. TRANSLATORS: def IEx.Helpers.c(files, path \\ ".")
#: lib/iex/helpers.ex:68
msgid ""
"Expects a list of files to compile and a path\n"
"to write their object code to. It returns the name\n"
"of the compiled modules.\n"
"\n"
"When compiling one file, there is no need to wrap it in a list.\n"
"\n"
"## Examples\n"
"\n"
"    c [\"foo.ex\", \"bar.ex\"], \"ebin\"\n"
"    #=> [Foo,Bar]\n"
"\n"
"    c \"baz.ex\"\n"
"    #=> [Baz]\n"
msgstr ""
"コンパイルするファイルのリストとオブジェクトコードを\n"
"書き出すパスを指定します。コンパイルされたモジュールの名前を\n"
"返します。\n"
"\n"
"一つのファイルをコンパイルする時にリストにする必要はありません\n"
"\n"
"## 例\n"
"\n"
"    c [\"foo.ex\", \"bar.ex\"], \"ebin\"\n"
"    #=> [Foo,Bar]\n"
"\n"
"    c \"baz.ex\"\n"
"    #=> [Baz]\n"

#. TRANSLATORS: defmacro IEx.Helpers.import_file(path)
#: lib/iex/helpers.ex:447
msgid ""
"Evaluates the contents of the file at `path` as if it were directly typed "
"into\n"
"the shell. `path` has to be a literal binary.\n"
"\n"
"A leading `~` in `path` is automatically expanded.\n"
"\n"
"## Examples\n"
"\n"
"    # ~/file.exs\n"
"    value = 13\n"
"\n"
"    # in the shell\n"
"    iex(1)> import_file \"~/file.exs\"\n"
"    13\n"
"    iex(2)> value\n"
"    13\n"
msgstr ""
"それが直接シェルでタイプされたかのように`path`のファイルの内容を評価しま"
"す。\n"
"`path`はリテラルバイナリでなくてはなりません。\n"
"\n"
"`path`の先頭の`~`は自動的に展開されます。\n"
"\n"
"## 例\n"
"\n"
"    # ~/file.exs\n"
"    value = 13\n"
"\n"
"    # in the shell\n"
"    iex(1)> import_file \"~/file.exs\"\n"
"    13\n"
"    iex(2)> value\n"
"    13\n"

#. TRANSLATORS: def IEx.Helpers.clear()
#: lib/iex/helpers.ex:103
msgid ""
"Clears the console screen.\n"
"\n"
"This function only works if ANSI escape codes are enabled\n"
"on the shell, which means this function is by default\n"
"unavailable on Windows machines.\n"
msgstr ""
"コンソールスクリーンをクリアします。\n"
"\n"
"この関数はANSIエスケープコードが有効なシェルでのみ動作します。\n"
"これはデフォルトではWindowsでは利用できないことを意味します。\n"

#. TRANSLATORS: def IEx.Helpers.cd(directory)
#: lib/iex/helpers.ex:347
msgid "Changes the current working directory to the given path.\n"
msgstr "与えられたパスへカレントディレクトリを変更します。\n"
